name: Manual Server Deployment

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Deployment description'
        required: false
        default: 'Manual deployment'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y oathtool expect openssh-client

      - name: Setup SSH keys
        run: |
          # Setup proxy SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.PROXY_SSH_PRIVATE_KEY }}" > ~/.ssh/proxy_key
          chmod 600 ~/.ssh/proxy_key
          
          # Setup server SSH key
          echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/server_key
          chmod 600 ~/.ssh/server_key
          
          # Add proxy to known hosts to avoid interactive prompt
          ssh-keyscan -H ${{ secrets.PROXY_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Redact keys from any potential output
          echo "SSH keys configured (key content hidden for security)"

      - name: Create SSH script with TOTP
        env:
          TOTP_SECRET: ${{ secrets.PROXY_TOTP_SECRET }}
          PROXY_USER: ${{ secrets.PROXY_USER }}
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
        run: |
          cat > ssh_with_totp.sh << SCRIPT
          #!/bin/bash
          TOTP_SECRET="$TOTP_SECRET"
          PROXY_USER="$PROXY_USER"
          PROXY_HOST="$PROXY_HOST"
          
          TOTP_CODE=\$(oathtool --totp -b "\$TOTP_SECRET")
          
          expect << EXPECT_SCRIPT
          set timeout 30
          spawn ssh -i ~/.ssh/proxy_key -o StrictHostKeyChecking=no \$PROXY_USER@\$PROXY_HOST "\$@"
          expect {
              "Verification code: " {
                  send "\$TOTP_CODE\r"
                  exp_continue
              }
              eof
          }
          EXPECT_SCRIPT
          SCRIPT
          chmod +x ssh_with_totp.sh

      - name: Test proxy connection
        run: |
          ./ssh_with_totp.sh "echo 'Proxy connection successful'"

      - name: Deploy to server through proxy
        env:
          TOTP_SECRET: ${{ secrets.PROXY_TOTP_SECRET }}
          PROXY_USER: ${{ secrets.PROXY_USER }}
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          TOTP_CODE=$(oathtool --totp -b "$TOTP_SECRET")
          
          echo "Connecting to server and deploying..."
          
          # Deploy commands on the server
          expect << EOF
          set timeout 60
          
          spawn ssh -i ~/.ssh/server_key -o StrictHostKeyChecking=no -o ProxyCommand="ssh -i ~/.ssh/proxy_key -o StrictHostKeyChecking=no $PROXY_USER@$PROXY_HOST" $SERVER_USER@$SERVER_HOST "cd docmost && sudo docker compose pull && sudo docker compose up -d"
          
          expect {
              "Verification code: " {
                  send "$TOTP_CODE\r"
                  exp_continue
              }
              eof
          }
          
          catch wait result
          exit [lindex \$result 3]
          EOF

      - name: Cleanup SSH keys
        if: always()
        run: |
          # Remove SSH keys and sensitive files
          rm -f ~/.ssh/proxy_key ~/.ssh/server_key ~/.ssh/known_hosts
          rm -f ssh_with_totp.sh
          echo "Cleanup completed: All sensitive files removed"

      - name: Deployment output
        run: |
          echo "Deployment initiated successfully!"
          echo "Description: ${{ github.event.inputs.description }}"

